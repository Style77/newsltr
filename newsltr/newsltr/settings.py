"""
Django settings for newsltr project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

import dj_database_url
from dotenv import load_dotenv

DEVELOPMENT = os.getenv("DJANGO_DEVELOPMENT", True)
if DEVELOPMENT:
    load_dotenv(".env")


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR: str = str(Path(__file__).resolve().parent.parent)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = DEVELOPMENT
ALLOWED_HOSTS = ["*"]
FRONT_END_BASE_URL: str = os.getenv("FRONT_END_BASE_URL", "http://localhost:3000")

if DEVELOPMENT:
    ALLOWED_HOSTS = ["0.0.0.0", "localhost", "127.0.0.1"]
    FRONT_END_BASE_URL = "http://localhost:3000"

# Stripe

STRIPE_KEY = os.getenv("STRIPE_SECRET_KEY")
STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET")
STRIPE_PUBLISHABLE_KEY = os.getenv("STRIPE_PUBLISHABLE_KEY")

# Application definition

# Custom Admin Implementation
UNFOLD_ADMIN = ["unfold"]

# Core Django Apps
CORE_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

# Third-party Packages
THIRD_PARTY_APPS = [
    "corsheaders",
    "rest_framework",
    "djoser",
]

# Health Check Apps
HEALTH_CHECK_APPS = [
    "health_check",
    "health_check.db",
    "health_check.cache",
    "health_check.storage",
    "health_check.contrib.migrations",
    # "health_check.contrib.celery",
    # "health_check.contrib.celery_ping",
    "health_check.contrib.psutil",
    # "health_check.contrib.rabbitmq",
    "health_check.contrib.redis",
]

# Custom Apps
CUSTOM_APPS = [
    "authorization.apps.AuthorizationConfig",
    "workspaces.apps.WorkspacesConfig",
    "payments.apps.PaymentsConfig",
    "campaigns.apps.CampaignsConfig",
    "email_templates.apps.EmailTemplatesConfig",
]

# Celery Apps
CELERY_APPS = [
    "django_celery_results",
    "django_celery_beat",
]

# Combine all categories
INSTALLED_APPS = (
    UNFOLD_ADMIN
    + CORE_APPS
    + THIRD_PARTY_APPS
    + HEALTH_CHECK_APPS
    + CUSTOM_APPS
    + CELERY_APPS
)

# Redis

REDIS_URL = os.getenv("REDIS_URL")

# Celery

CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = "django-db"
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_IMPORTS = ()
CELERY_REDBEAT_URL = os.getenv("REDBEAT_REDIS_URL", REDIS_URL)
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers.DatabaseScheduler"

# AWS

AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")

# Email

EMAIL_BACKEND = "django_ses.SESBackend"
DEFAULT_FROM_EMAIL = (
    f"Newsltr <{os.getenv('DEFAULT_FROM_EMAIL', 'newsltr@newsltr.io')}>"
)

# Rest Framework

AUTH_USER_MODEL = "authorization.User"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "authorization.authentication.JWTCookiesAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 50,
}

if DEVELOPMENT:
    INSTALLED_APPS += ["drf_spectacular", "drf_spectacular_sidecar"]

    REST_FRAMEWORK["DEFAULT_SCHEMA_CLASS"] = "drf_spectacular.openapi.AutoSchema"

    SPECTACULAR_SETTINGS = {
        "SWAGGER_UI_SETTINGS": {
            "deepLinking": True,
            "persistAuthorization": True,
            "displayOperationId": True,
        },
        "TITLE": "Newsltr",
        "DESCRIPTION": "Newsltr API Documentation",
        "VERSION": "1.0.0",
        "SERVE_INCLUDE_SCHEMA": False,
        "SWAGGER_UI_DIST": "SIDECAR",  # shorthand to use the sidecar instead
        "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
        "REDOC_DIST": "SIDECAR",
        "SERVE_PERMISSIONS": ["rest_framework.permissions.AllowAny"],
        "SERVE_AUTHENTICATION": [],
        "AUTHENTICATION_WHITELIST": [],
        # OTHER SETTINGS
    }


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=2)
    if DEVELOPMENT
    else timedelta(minutes=15),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    # To include additional security let refresh_tokens be blacklisted
    # after using one of them
    # "ROTATE_REFRESH_TOKENS": True,
    # "BLACKLIST_AFTER_ROTATION": True,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "TOKEN_OBTAIN_SERIALIZER": "authorization.serializers.CustomTokenObtainSerializer",
    # "TOKEN_REFRESH_SERIALIZER": "authorization.serializers.CustomTokenRefreshSerializer",
    "SOCIAL_AUTH_TOKEN_STRATEGY": "djoser.social.token.jwt.TokenStrategy",
    "TOKEN_VERIFY_SERIALIZER": "authorization.serializers.CustomTokenVerifySerializer",
    "USER_AUTHENTICATION_RULE": "authorization.utils.user_authentication_rule",
    "AUTH_COOKIE": "access_token",
    "REFRESH_COOKIE": "refresh_token",
    "AUTH_COOKIE_DOMAIN": None,
    "AUTH_COOKIE_SECURE": False if DEVELOPMENT else True,
    "AUTH_COOKIE_HTTP_ONLY": True,
    "AUTH_COOKIE_PATH": "/",
    "AUTH_COOKIE_SAMESITE": "Lax",
}

DJOSER = {
    "LOGIN_FIELD": "email",
    "UPDATE_LAST_LOGIN": True,
    "SEND_ACTIVATION_EMAIL": True,
    "ACTIVATION_URL": FRONT_END_BASE_URL + "/activate/{uid}/{token}",
    "PASSWORD_RESET_CONFIRM_URL": FRONT_END_BASE_URL
    + "/password/reset/confirm/{uid}/{token}",
    "USERNAME_RESET_CONFIRM_URL": FRONT_END_BASE_URL
    + "/email/reset/confirm/{uid}/{token}",
    "SEND_CONFIRMATION_EMAIL": True,
    "USER_CREATE_PASSWORD_RETYPE": True,
    "SET_PASSWORD_RETYPE": True,
    "PASSWORD_RESET_CONFIRM_RETYPE": True,
    "TOKEN_MODEL": None,
    "HIDE_USERS": True,
    "SERIALIZERS": {
        "user_create_password_retype": "authorization.serializers.CustomUserCreateSerliazier",
        "user": "authorization.serializers.CustomUserSerializer",
        "current_user": "authorization.serializers.CurrentUserSerializer",
    },
    "EMAIL": {
        "activation": "authorization.email.ActivationEmail",
        "confirmation": "authorization.email.ConfirmationEmail",
        "password_reset": "authorization.email.PasswordResetEmail",
        "password_changed_confirmation": "authorization.email.PasswordChangedConfirmationEmail",
        "username_changed_confirmation": "authorization.email.UsernameChangedConfirmationEmail",
        "username_reset": "authorization.email.UsernameResetEmail",
    },
}

AUTHENTICATION_BACKENDS = ("django.contrib.auth.backends.AllowAllUsersModelBackend",)

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv("GOOGLE_OAUTH2_KEY")
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv("GOOGLE_OAUTH2_SECRET")
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    "https://www.googleapis.com/auth/userinfo.email",
    "https://www.googleapis.com/auth/userinfo.profile",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Cors

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "https://checkout.stripe.com"
]
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = "newsltr.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "newsltr.wsgi.application"


WORKSPACES = {
    "ACTIVATION_URL": FRONT_END_BASE_URL
    + "/invite/accept/{uid}/{workspace_id}/{token}",
    "API_KEY_LENGTH": 40,
}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = dict()
DATABASES["default"] = dj_database_url.config(
    conn_max_age=600,
    conn_health_checks=True,
)

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Admin styling
UNFOLD = {
    "SITE_TITLE": "newsltr",
    "SITE_HEADER": "newsltr - admin panel",
    "SITE_URL": None,
}
